import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as d,o as a,c as i,b as e,d as n,e as l,a as s}from"./app-jzX7c5DY.js";const r={},c=s(`<h2 id="linux-安装-docker-centos" tabindex="-1"><a class="header-anchor" href="#linux-安装-docker-centos"><span>Linux 安装 docker CentOS</span></a></h2><h3 id="卸载旧版本" tabindex="-1"><a class="header-anchor" href="#卸载旧版本"><span>卸载旧版本</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
    docker-client <span class="token punctuation">\\</span>
    docker-client-latest <span class="token punctuation">\\</span>
    docker-common <span class="token punctuation">\\</span>
    docker-latest <span class="token punctuation">\\</span>
    docker-latest-logrotate <span class="token punctuation">\\</span>
    docker-logrotate <span class="token punctuation">\\</span>
    docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置docker的yum库" tabindex="-1"><a class="header-anchor" href="#配置docker的yum库"><span>配置Docker的yum库</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装成功后，执行命令，配置Docker的yum源：</p><div class="language-Bash line-numbers-mode" data-ext="Bash" data-title="Bash"><pre class="language-Bash"><code>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="安装-docker" tabindex="-1"><a class="header-anchor" href="#安装-docker"><span>安装 docker</span></a></h3><div class="language-Bash line-numbers-mode" data-ext="Bash" data-title="Bash"><pre class="language-Bash"><code>yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="启动和校验" tabindex="-1"><a class="header-anchor" href="#启动和校验"><span>启动和校验</span></a></h3><div class="language-Bash line-numbers-mode" data-ext="Bash" data-title="Bash"><pre class="language-Bash"><code># 启动Docker
systemctl start docker

# 停止Docker
systemctl stop docker

# 重启
systemctl restart docker

# 设置开机自启
systemctl enable docker

# 执行docker ps命令，如果不报错，说明安装启动成功
docker ps
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置镜像加速" tabindex="-1"><a class="header-anchor" href="#配置镜像加速"><span>配置镜像加速</span></a></h3><h4 id="注册阿里云账号" tabindex="-1"><a class="header-anchor" href="#注册阿里云账号"><span>注册阿里云账号</span></a></h4><p>https://www.aliyun.com/</p><h4 id="开通镜像服务" tabindex="-1"><a class="header-anchor" href="#开通镜像服务"><span>开通镜像服务</span></a></h4><p>在首页的产品中，找到阿里云的<strong>容器镜像服务</strong></p><p>点击后进入控制台：</p><h4 id="配置镜像加速-1" tabindex="-1"><a class="header-anchor" href="#配置镜像加速-1"><span>配置镜像加速</span></a></h4><p>找到<strong>镜像工具</strong>下的<strong>镜像</strong>加速器：</p><figure><img src="https://img.picgo.net/2023/11/22/4d97fa93-c21b-40f8-8c02-dff9903cc924c68d94394b3bc676.png" alt="4d97fa93-c21b-40f8-8c02-dff9903cc924" tabindex="0" loading="lazy"><figcaption>4d97fa93-c21b-40f8-8c02-dff9903cc924</figcaption></figure><div class="language-Bash line-numbers-mode" data-ext="Bash" data-title="Bash"><pre class="language-Bash"><code># 创建目录
mkdir -p /etc/docker

# 复制内容，注意把其中的镜像加速地址改成你自己的
tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;
{
  &quot;registry-mirrors&quot;: [&quot;https://xxxx.mirror.aliyuncs.com&quot;]
}
EOF

# 重新加载配置
systemctl daemon-reload

# 重启Docker
systemctl restart docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门"><span>快速入门</span></a></h2><h3 id="第一条命令" tabindex="-1"><a class="header-anchor" href="#第一条命令"><span>第一条命令</span></a></h3><div class="language-PowerShell line-numbers-mode" data-ext="PowerShell" data-title="PowerShell"><pre class="language-PowerShell"><code>docker run -d \\
  --name mysql \\
  -p 3306:3306 \\
  -e TZ=Asia/Shanghai \\
  -e MYSQL_ROOT_PASSWORD=123 \\
  mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>docker run -d</code> ：创建并运行一个容器，<code>-d</code>则是让容器以后台进程运行</li><li><code>--name mysql </code> : 给容器起个名字叫<code>mysql</code>，你可以叫别的</li><li><code>-p 3306:3306</code> : 设置端口映射。 <ul><li><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将<strong><strong>宿主机</strong></strong>端口****映射容器内到端口</strong>，当访问宿主机指定端口时，就是在访问容器内的端口了。</li><li>容器内端口往往是由容器内的进程决定，例如MySQL进程默认端口是3306，因此容器内端口一定是3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</li><li>格式： <code>-p 宿主机端口:容器内端口</code>，示例中就是将宿主机的3306映射到容器内的3306端口</li></ul></li><li><code>-e TZ=Asia/Shanghai</code> : 配置容器内进程运行时的一些参数 <ul><li>格式：<code>-e KEY=VALUE</code>，KEY和VALUE都由容器内进程决定</li><li>案例中，<code>TZ=Asia/Shanghai</code>是设置时区；<code>MYSQL_ROOT_PASSWORD=123</code>是设置MySQL默认密码</li></ul></li><li><code>mysql</code> : 设置<strong>镜像</strong>名称，Docker会根据这个名字搜索并下载镜像 <ul><li>格式：<code>REPOSITORY:TAG</code>，例如<code>mysql:8.0</code>，其中<code>REPOSITORY</code>可以理解为镜像名，<code>TAG</code>是版本号</li><li>在未指定<code>TAG</code>的情况下，默认是最新版本，也就是<code>mysql:latest</code></li></ul></li></ul><h2 id="命令整理" tabindex="-1"><a class="header-anchor" href="#命令整理"><span>命令整理</span></a></h2>`,26),h=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},[e("strong",null,"命令")]),e("th",{style:{"text-align":"left"}},[e("strong",null,"说明")]),e("th",{style:{"text-align":"left"}},[e("strong",null,"文档地址")])])],-1),m=e("td",{style:{"text-align":"left"}},"docker pull",-1),g=e("td",{style:{"text-align":"left"}},"拉取镜像",-1),u={style:{"text-align":"left"}},p={href:"https://docs.docker.com/engine/reference/commandline/pull/",target:"_blank",rel:"noopener noreferrer"},_=e("td",{style:{"text-align":"left"}},"docker push",-1),f=e("td",{style:{"text-align":"left"}},"推送镜像到DockerRegistry",-1),v={style:{"text-align":"left"}},k={href:"https://docs.docker.com/engine/reference/commandline/push/",target:"_blank",rel:"noopener noreferrer"},y=e("td",{style:{"text-align":"left"}},"docker images",-1),x=e("td",{style:{"text-align":"left"}},"查看本地镜像",-1),b={style:{"text-align":"left"}},w={href:"https://docs.docker.com/engine/reference/commandline/images/",target:"_blank",rel:"noopener noreferrer"},D=e("td",{style:{"text-align":"left"}},"docker rmi",-1),q=e("td",{style:{"text-align":"left"}},"删除本地镜像",-1),N={style:{"text-align":"left"}},S={href:"https://docs.docker.com/engine/reference/commandline/rmi/",target:"_blank",rel:"noopener noreferrer"},O=e("td",{style:{"text-align":"left"}},"docker run",-1),T=e("td",{style:{"text-align":"left"}},"创建并运行容器（不能重复创建）",-1),E={style:{"text-align":"left"}},B={href:"https://docs.docker.com/engine/reference/commandline/run/",target:"_blank",rel:"noopener noreferrer"},P=e("td",{style:{"text-align":"left"}},"docker stop",-1),R=e("td",{style:{"text-align":"left"}},"停止指定容器",-1),j={style:{"text-align":"left"}},L={href:"https://docs.docker.com/engine/reference/commandline/stop/",target:"_blank",rel:"noopener noreferrer"},A=e("td",{style:{"text-align":"left"}},"docker start",-1),I=e("td",{style:{"text-align":"left"}},"启动指定容器",-1),C={style:{"text-align":"left"}},Y={href:"https://docs.docker.com/engine/reference/commandline/start/",target:"_blank",rel:"noopener noreferrer"},M=e("td",{style:{"text-align":"left"}},"docker restart",-1),V=e("td",{style:{"text-align":"left"}},"重新启动容器",-1),z={style:{"text-align":"left"}},Z={href:"https://docs.docker.com/engine/reference/commandline/restart/",target:"_blank",rel:"noopener noreferrer"},F=e("td",{style:{"text-align":"left"}},"docker rm",-1),G=e("td",{style:{"text-align":"left"}},"删除指定容器",-1),U={style:{"text-align":"left"}},Q={href:"https://docs.docker.com/engine/reference/commandline/rm/",target:"_blank",rel:"noopener noreferrer"},K=e("td",{style:{"text-align":"left"}},"docker ps",-1),W=e("td",{style:{"text-align":"left"}},"查看容器",-1),X={style:{"text-align":"left"}},$={href:"https://docs.docker.com/engine/reference/commandline/ps/",target:"_blank",rel:"noopener noreferrer"},J=e("tr",null,[e("td",{style:{"text-align":"left"}},"docker ps -a"),e("td",{style:{"text-align":"left"}},"查看所有的容器包括已经停止的容器"),e("td",{style:{"text-align":"left"}})],-1),H=e("td",{style:{"text-align":"left"}},"docker logs",-1),ee=e("td",{style:{"text-align":"left"}},"查看容器运行日志",-1),te={style:{"text-align":"left"}},ne={href:"https://docs.docker.com/engine/reference/commandline/logs/",target:"_blank",rel:"noopener noreferrer"},le=e("td",{style:{"text-align":"left"}},"docker exec",-1),se=e("td",{style:{"text-align":"left"}},"进入容器",-1),oe={style:{"text-align":"left"}},de={href:"https://docs.docker.com/engine/reference/commandline/exec/",target:"_blank",rel:"noopener noreferrer"},ae=e("td",{style:{"text-align":"left"}},"docker save",-1),ie=e("td",{style:{"text-align":"left"}},"保存镜像到本地压缩文件",-1),re={style:{"text-align":"left"}},ce={href:"https://docs.docker.com/engine/reference/commandline/save/",target:"_blank",rel:"noopener noreferrer"},he=e("td",{style:{"text-align":"left"}},"docker load",-1),me=e("td",{style:{"text-align":"left"}},"加载本地压缩文件到镜像",-1),ge={style:{"text-align":"left"}},ue={href:"https://docs.docker.com/engine/reference/commandline/load/",target:"_blank",rel:"noopener noreferrer"},pe=e("td",{style:{"text-align":"left"}},"docker inspect",-1),_e=e("td",{style:{"text-align":"left"}},"查看容器详细信息",-1),fe={style:{"text-align":"left"}},ve={href:"https://docs.docker.com/engine/reference/commandline/inspect/",target:"_blank",rel:"noopener noreferrer"},ke=e("tr",null,[e("td",{style:{"text-align":"left"}},"--name"),e("td",{style:{"text-align":"left"}},"指定容器的名字"),e("td",{style:{"text-align":"left"}})],-1),ye=e("tr",null,[e("td",{style:{"text-align":"left"}},"-d"),e("td",{style:{"text-align":"left"}},"后台运行"),e("td",{style:{"text-align":"left"}})],-1),xe=e("tr",null,[e("td",{style:{"text-align":"left"}},"-p"),e("td",{style:{"text-align":"left"}},"端口映射"),e("td",{style:{"text-align":"left"}})],-1),be=e("tr",null,[e("td",{style:{"text-align":"left"}},"-e"),e("td",{style:{"text-align":"left"}},"设置容器环境变量查看官网配置"),e("td",{style:{"text-align":"left"}})],-1),we=e("tr",null,[e("td",{style:{"text-align":"left"}},"-it"),e("td",{style:{"text-align":"left"}},"交互式进入容器"),e("td",{style:{"text-align":"left"}})],-1),De=e("tr",null,[e("td",{style:{"text-align":"left"}},"bash"),e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}})],-1),qe=e("td",{style:{"text-align":"left"}},"docker volume create",-1),Ne=e("td",{style:{"text-align":"left"}},"创建数据卷",-1),Se={style:{"text-align":"left"}},Oe={href:"https://docs.docker.com/engine/reference/commandline/volume_create/",target:"_blank",rel:"noopener noreferrer"},Te=e("td",{style:{"text-align":"left"}},"docker volume ls",-1),Ee=e("td",{style:{"text-align":"left"}},"查看所有数据卷",-1),Be={style:{"text-align":"left"}},Pe={href:"https://docs.docker.com/engine/reference/commandline/volume_ls/",target:"_blank",rel:"noopener noreferrer"},Re=e("td",{style:{"text-align":"left"}},"docker volume rm",-1),je=e("td",{style:{"text-align":"left"}},"删除指定数据卷",-1),Le={style:{"text-align":"left"}},Ae={href:"https://docs.docker.com/engine/reference/commandline/volume_prune/",target:"_blank",rel:"noopener noreferrer"},Ie=e("td",{style:{"text-align":"left"}},"docker volume inspect",-1),Ce=e("td",{style:{"text-align":"left"}},"查看某个数据卷的详情",-1),Ye={style:{"text-align":"left"}},Me={href:"https://docs.docker.com/engine/reference/commandline/volume_inspect/",target:"_blank",rel:"noopener noreferrer"},Ve=e("td",{style:{"text-align":"left"}},"docker volume prune",-1),ze=e("td",{style:{"text-align":"left"}},"清除数据卷",-1),Ze={style:{"text-align":"left"}},Fe={href:"https://docs.docker.com/engine/reference/commandline/volume_prune/",target:"_blank",rel:"noopener noreferrer"},Ge=e("tr",null,[e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}})],-1),Ue=e("tr",null,[e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}})],-1),Qe=e("tr",null,[e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}})],-1),Ke=e("tr",null,[e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}})],-1),We=e("tr",null,[e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}})],-1),Xe=e("tr",null,[e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}})],-1),$e=e("tr",null,[e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}})],-1),Je=e("tr",null,[e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}})],-1),He=e("tr",null,[e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}})],-1),et=s(`<h3 id="格式化访问的命令" tabindex="-1"><a class="header-anchor" href="#格式化访问的命令"><span>格式化访问的命令</span></a></h3><p>格式化方式访问，格式会更加清爽</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">--format</span> <span class="token string">&quot;table {{.ID}}<span class="token entity" title="\\t">\\t</span>{{.Image}}<span class="token entity" title="\\t">\\t</span>{{.Ports}}<span class="token entity" title="\\t">\\t</span>{{.Status}}<span class="token entity" title="\\t">\\t</span>{{.Names}}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数据卷" tabindex="-1"><a class="header-anchor" href="#数据卷"><span>数据卷</span></a></h3><p><strong>数据卷（volume）<strong>是一个虚拟目录，是</strong>容器内目录</strong>与<strong>宿主机****目录</strong>之间映射的桥梁。</p><p>以Nginx为例，我们知道Nginx中有两个关键的目录：</p><ul><li><code>html</code>：放置一些静态资源</li><li><code>conf</code>：放置配置文件</li></ul><p>如果我们要让Nginx代理我们的静态资源，最好是放到<code>html</code>目录；如果我们要修改Nginx的配置，最好是找到<code>conf</code>下的<code>nginx.conf</code>文件。</p><p>但遗憾的是，容器运行的Nginx所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：<img src="https://img.picgo.net/2023/11/22/whiteboard_exported_image385f09e5cfe86808.png" alt="whiteboard_exported_image" loading="lazy"></p><h4 id="数据卷命令" tabindex="-1"><a class="header-anchor" href="#数据卷命令"><span>数据卷命令</span></a></h4>`,10),tt=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},[e("strong",null,"命令")]),e("th",{style:{"text-align":"left"}},[e("strong",null,"说明")]),e("th",{style:{"text-align":"left"}},[e("strong",null,"文档地址")])])],-1),nt=e("td",{style:{"text-align":"left"}},"docker volume create",-1),lt=e("td",{style:{"text-align":"left"}},"创建数据卷",-1),st={style:{"text-align":"left"}},ot={href:"https://docs.docker.com/engine/reference/commandline/volume_create/",target:"_blank",rel:"noopener noreferrer"},dt=e("td",{style:{"text-align":"left"}},"docker volume ls",-1),at=e("td",{style:{"text-align":"left"}},"查看所有数据卷",-1),it={style:{"text-align":"left"}},rt={href:"https://docs.docker.com/engine/reference/commandline/volume_ls/",target:"_blank",rel:"noopener noreferrer"},ct=e("td",{style:{"text-align":"left"}},"docker volume rm",-1),ht=e("td",{style:{"text-align":"left"}},"删除指定数据卷",-1),mt={style:{"text-align":"left"}},gt={href:"https://docs.docker.com/engine/reference/commandline/volume_prune/",target:"_blank",rel:"noopener noreferrer"},ut=e("td",{style:{"text-align":"left"}},"docker volume inspect",-1),pt=e("td",{style:{"text-align":"left"}},"查看某个数据卷的详情",-1),_t={style:{"text-align":"left"}},ft={href:"https://docs.docker.com/engine/reference/commandline/volume_inspect/",target:"_blank",rel:"noopener noreferrer"},vt=e("td",{style:{"text-align":"left"}},"docker volume prune",-1),kt=e("td",{style:{"text-align":"left"}},"清除数据卷",-1),yt={style:{"text-align":"left"}},xt={href:"https://docs.docker.com/engine/reference/commandline/volume_prune/",target:"_blank",rel:"noopener noreferrer"},bt=s(`<h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-v</span> html:/usr/share/ng
inx/html nginx

<span class="token function">docker</span> volume <span class="token function">ls</span>

<span class="token function">docker</span> volume inspect html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>DockerFile</span></a></h2><h3 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令"><span>常用指令</span></a></h3><table><thead><tr><th style="text-align:left;"><strong>指令</strong></th><th style="text-align:left;"><strong>说明</strong></th><th style="text-align:left;"><strong>示例</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>FROM</strong></td><td style="text-align:left;">指定基础镜像</td><td style="text-align:left;"><code>FROM centos:6</code></td></tr><tr><td style="text-align:left;"><strong>ENV</strong></td><td style="text-align:left;">设置环境变量，可在后面指令使用</td><td style="text-align:left;"><code>ENV key value</code></td></tr><tr><td style="text-align:left;"><strong>COPY</strong></td><td style="text-align:left;">拷贝本地文件到镜像的指定目录</td><td style="text-align:left;"><code>COPY ./xx.jar /tmp/app.jar</code></td></tr><tr><td style="text-align:left;"><strong>RUN</strong></td><td style="text-align:left;">执行Linux的shell命令，一般是安装过程的命令</td><td style="text-align:left;"><code>RUN yum install gcc</code></td></tr><tr><td style="text-align:left;"><strong>EXPOSE</strong></td><td style="text-align:left;">指定容器运行时监听的端口，是给镜像使用者看的</td><td style="text-align:left;">EXPOSE 8080</td></tr><tr><td style="text-align:left;"><strong>ENTRYPOINT</strong></td><td style="text-align:left;">镜像中应用的启动命令，容器运行时调用</td><td style="text-align:left;">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><h3 id="案例-1" tabindex="-1"><a class="header-anchor" href="#案例-1"><span>案例</span></a></h3><div class="language-Dockerfile line-numbers-mode" data-ext="Dockerfile" data-title="Dockerfile"><pre class="language-Dockerfile"><code># 基础镜像
FROM openjdk:11.0-jre-buster
# 设定时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone
# 拷贝jar包
COPY docker-demo.jar /app.jar
# 入口
ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构建镜像" tabindex="-1"><a class="header-anchor" href="#构建镜像"><span>构建镜像</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> docker-demo:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>docker build </code>: 就是构建一个docker镜像</li><li><code>-t docker-demo:1.0</code> ：<code>-t</code>参数是指定镜像的名称（<code>repository</code>和<code>tag</code>）</li><li><code>.</code> : 最后的点是指构建时Dockerfile所在路径，由于我们进入了demo目录，所以指定的是<code>.</code>代表当前目录，也可以直接指定Dockerfile目录：</li></ul><h2 id="网络" tabindex="-1"><a class="header-anchor" href="#网络"><span>网络</span></a></h2>`,11),wt=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},[e("strong",null,"命令")]),e("th",{style:{"text-align":"left"}},[e("strong",null,"说明")]),e("th",{style:{"text-align":"left"}},[e("strong",null,"文档地址")])])],-1),Dt=e("td",{style:{"text-align":"left"}},"docker network create",-1),qt=e("td",{style:{"text-align":"left"}},"创建一个网络",-1),Nt={style:{"text-align":"left"}},St={href:"https://docs.docker.com/engine/reference/commandline/network_create/",target:"_blank",rel:"noopener noreferrer"},Ot=e("td",{style:{"text-align":"left"}},"docker network ls",-1),Tt=e("td",{style:{"text-align":"left"}},"查看所有网络",-1),Et={style:{"text-align":"left"}},Bt={href:"https://docs.docker.com/engine/reference/commandline/network_ls/",target:"_blank",rel:"noopener noreferrer"},Pt=e("td",{style:{"text-align":"left"}},"docker network rm",-1),Rt=e("td",{style:{"text-align":"left"}},"删除指定网络",-1),jt={style:{"text-align":"left"}},Lt={href:"https://docs.docker.com/engine/reference/commandline/network_rm/",target:"_blank",rel:"noopener noreferrer"},At=e("td",{style:{"text-align":"left"}},"docker network prune",-1),It=e("td",{style:{"text-align":"left"}},"清除未使用的网络",-1),Ct={style:{"text-align":"left"}},Yt={href:"https://docs.docker.com/engine/reference/commandline/network_prune/",target:"_blank",rel:"noopener noreferrer"},Mt=e("td",{style:{"text-align":"left"}},"docker network connect",-1),Vt=e("td",{style:{"text-align":"left"}},"使指定容器连接加入某网络",-1),zt={style:{"text-align":"left"}},Zt={href:"https://docs.docker.com/engine/reference/commandline/network_connect/",target:"_blank",rel:"noopener noreferrer"},Ft=e("td",{style:{"text-align":"left"}},"docker network disconnect",-1),Gt=e("td",{style:{"text-align":"left"}},"使指定容器连接离开某网络",-1),Ut={style:{"text-align":"left"}},Qt={href:"https://docs.docker.com/engine/reference/commandline/network_disconnect/",target:"_blank",rel:"noopener noreferrer"},Kt=e("td",{style:{"text-align":"left"}},"docker network inspect",-1),Wt=e("td",{style:{"text-align":"left"}},"查看网络详细信息",-1),Xt={style:{"text-align":"left"}},$t={href:"https://docs.docker.com/engine/reference/commandline/network_inspect/",target:"_blank",rel:"noopener noreferrer"},Jt=s(`<div class="language-Bash line-numbers-mode" data-ext="Bash" data-title="Bash"><pre class="language-Bash"><code># 1.首先通过命令创建一个网络
docker network create hmall

# 2.然后查看网络
docker network ls
# 结果：
NETWORK ID     NAME      DRIVER    SCOPE
639bc44d0a87   bridge    bridge    local
403f16ec62a2   hmall     bridge    local
0dc0f72a0fbb   host      host      local
cd8d3e8df47b   none      null      local
# 其中，除了hmall以外，其它都是默认的网络

# 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名
# 这样该网络内的其它容器可以用别名互相访问！
# 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名
docker network connect hmall mysql --alias db
# 3.2.db容器，也就是我们的java项目
docker network connect hmall dd

# 4.进入dd容器，尝试利用别名访问db
# 4.1.进入容器
docker exec -it dd bash
# 4.2.用db别名访问
ping db
# 结果
PING db (172.18.0.2) 56(84) bytes of data.
64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms
64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms
# 4.3.用容器名访问
ping mysql
# 结果：
PING mysql (172.18.0.2) 56(84) bytes of data.
64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms
64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function Ht(en,tn){const t=d("ExternalLinkIcon");return a(),i("div",null,[c,e("table",null,[h,e("tbody",null,[e("tr",null,[m,g,e("td",u,[e("a",p,[n("docker pull"),l(t)])])]),e("tr",null,[_,f,e("td",v,[e("a",k,[n("docker push"),l(t)])])]),e("tr",null,[y,x,e("td",b,[e("a",w,[n("docker images"),l(t)])])]),e("tr",null,[D,q,e("td",N,[e("a",S,[n("docker rmi"),l(t)])])]),e("tr",null,[O,T,e("td",E,[e("a",B,[n("docker run"),l(t)])])]),e("tr",null,[P,R,e("td",j,[e("a",L,[n("docker stop"),l(t)])])]),e("tr",null,[A,I,e("td",C,[e("a",Y,[n("docker start"),l(t)])])]),e("tr",null,[M,V,e("td",z,[e("a",Z,[n("docker restart"),l(t)])])]),e("tr",null,[F,G,e("td",U,[e("a",Q,[n("docs.docker.com"),l(t)])])]),e("tr",null,[K,W,e("td",X,[e("a",$,[n("docker ps"),l(t)])])]),J,e("tr",null,[H,ee,e("td",te,[e("a",ne,[n("docker logs"),l(t)])])]),e("tr",null,[le,se,e("td",oe,[e("a",de,[n("docker exec"),l(t)])])]),e("tr",null,[ae,ie,e("td",re,[e("a",ce,[n("docker save"),l(t)])])]),e("tr",null,[he,me,e("td",ge,[e("a",ue,[n("docker load"),l(t)])])]),e("tr",null,[pe,_e,e("td",fe,[e("a",ve,[n("docker inspect"),l(t)])])]),ke,ye,xe,be,we,De,e("tr",null,[qe,Ne,e("td",Se,[e("a",Oe,[n("docker volume create"),l(t)])])]),e("tr",null,[Te,Ee,e("td",Be,[e("a",Pe,[n("docs.docker.com"),l(t)])])]),e("tr",null,[Re,je,e("td",Le,[e("a",Ae,[n("docs.docker.com"),l(t)])])]),e("tr",null,[Ie,Ce,e("td",Ye,[e("a",Me,[n("docs.docker.com"),l(t)])])]),e("tr",null,[Ve,ze,e("td",Ze,[e("a",Fe,[n("docker volume prune"),l(t)])])]),Ge,Ue,Qe,Ke,We,Xe,$e,Je,He])]),et,e("table",null,[tt,e("tbody",null,[e("tr",null,[nt,lt,e("td",st,[e("a",ot,[n("docker volume create"),l(t)])])]),e("tr",null,[dt,at,e("td",it,[e("a",rt,[n("docs.docker.com"),l(t)])])]),e("tr",null,[ct,ht,e("td",mt,[e("a",gt,[n("docs.docker.com"),l(t)])])]),e("tr",null,[ut,pt,e("td",_t,[e("a",ft,[n("docs.docker.com"),l(t)])])]),e("tr",null,[vt,kt,e("td",yt,[e("a",xt,[n("docker volume prune"),l(t)])])])])]),bt,e("table",null,[wt,e("tbody",null,[e("tr",null,[Dt,qt,e("td",Nt,[e("a",St,[n("docker network create"),l(t)])])]),e("tr",null,[Ot,Tt,e("td",Et,[e("a",Bt,[n("docs.docker.com"),l(t)])])]),e("tr",null,[Pt,Rt,e("td",jt,[e("a",Lt,[n("docs.docker.com"),l(t)])])]),e("tr",null,[At,It,e("td",Ct,[e("a",Yt,[n("docs.docker.com"),l(t)])])]),e("tr",null,[Mt,Vt,e("td",zt,[e("a",Zt,[n("docs.docker.com"),l(t)])])]),e("tr",null,[Ft,Gt,e("td",Ut,[e("a",Qt,[n("docker network disconnect"),l(t)])])]),e("tr",null,[Kt,Wt,e("td",Xt,[e("a",$t,[n("docker network inspect"),l(t)])])])])]),Jt])}const sn=o(r,[["render",Ht],["__file","index.html.vue"]]),on=JSON.parse('{"path":"/server/Docker/","title":"Docker","lang":"zh-CN","frontmatter":{"title":"Docker","description":"Linux 安装 docker CentOS 卸载旧版本 配置Docker的yum库 安装成功后，执行命令，配置Docker的yum源： 安装 docker 启动和校验 配置镜像加速 注册阿里云账号 https://www.aliyun.com/ 开通镜像服务 在首页的产品中，找到阿里云的容器镜像服务 点击后进入控制台： 配置镜像加速 找到镜像工具下的...","head":[["meta",{"property":"og:url","content":"https://soft-vault.com/server/Docker/"}],["meta",{"property":"og:site_name","content":"Night.Soul"}],["meta",{"property":"og:title","content":"Docker"}],["meta",{"property":"og:description","content":"Linux 安装 docker CentOS 卸载旧版本 配置Docker的yum库 安装成功后，执行命令，配置Docker的yum源： 安装 docker 启动和校验 配置镜像加速 注册阿里云账号 https://www.aliyun.com/ 开通镜像服务 在首页的产品中，找到阿里云的容器镜像服务 点击后进入控制台： 配置镜像加速 找到镜像工具下的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.picgo.net/2023/11/22/4d97fa93-c21b-40f8-8c02-dff9903cc924c68d94394b3bc676.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-05T17:55:50.000Z"}],["meta",{"property":"article:author","content":"Night.Soul"}],["meta",{"property":"article:modified_time","content":"2024-02-05T17:55:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker\\",\\"image\\":[\\"https://img.picgo.net/2023/11/22/4d97fa93-c21b-40f8-8c02-dff9903cc924c68d94394b3bc676.png\\",\\"https://img.picgo.net/2023/11/22/whiteboard_exported_image385f09e5cfe86808.png\\"],\\"dateModified\\":\\"2024-02-05T17:55:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Night.Soul\\",\\"url\\":\\"https://github.com/NightSquirrl\\"}]}"]]},"headers":[{"level":2,"title":"Linux 安装 docker CentOS","slug":"linux-安装-docker-centos","link":"#linux-安装-docker-centos","children":[{"level":3,"title":"卸载旧版本","slug":"卸载旧版本","link":"#卸载旧版本","children":[]},{"level":3,"title":"配置Docker的yum库","slug":"配置docker的yum库","link":"#配置docker的yum库","children":[]},{"level":3,"title":"安装 docker","slug":"安装-docker","link":"#安装-docker","children":[]},{"level":3,"title":"启动和校验","slug":"启动和校验","link":"#启动和校验","children":[]},{"level":3,"title":"配置镜像加速","slug":"配置镜像加速","link":"#配置镜像加速","children":[]}]},{"level":2,"title":"快速入门","slug":"快速入门","link":"#快速入门","children":[{"level":3,"title":"第一条命令","slug":"第一条命令","link":"#第一条命令","children":[]}]},{"level":2,"title":"命令整理","slug":"命令整理","link":"#命令整理","children":[{"level":3,"title":"格式化访问的命令","slug":"格式化访问的命令","link":"#格式化访问的命令","children":[]},{"level":3,"title":"数据卷","slug":"数据卷","link":"#数据卷","children":[]}]},{"level":2,"title":"DockerFile","slug":"dockerfile","link":"#dockerfile","children":[{"level":3,"title":"常用指令","slug":"常用指令","link":"#常用指令","children":[]},{"level":3,"title":"案例","slug":"案例-1","link":"#案例-1","children":[]}]},{"level":2,"title":"网络","slug":"网络","link":"#网络","children":[]}],"git":{"createdTime":1700743533000,"updatedTime":1707155750000,"contributors":[{"name":"zeroeldath","email":"zeroeldath@Mac-Pro.local","commits":1}]},"readingTime":{"minutes":6.38,"words":1914},"filePathRelative":"server/Docker/index.md","localizedDate":"2023年11月23日","excerpt":"<h2>Linux 安装 docker CentOS</h2>\\n<h3>卸载旧版本</h3>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>yum remove <span class=\\"token function\\">docker</span> <span class=\\"token punctuation\\">\\\\</span>\\n    docker-client <span class=\\"token punctuation\\">\\\\</span>\\n    docker-client-latest <span class=\\"token punctuation\\">\\\\</span>\\n    docker-common <span class=\\"token punctuation\\">\\\\</span>\\n    docker-latest <span class=\\"token punctuation\\">\\\\</span>\\n    docker-latest-logrotate <span class=\\"token punctuation\\">\\\\</span>\\n    docker-logrotate <span class=\\"token punctuation\\">\\\\</span>\\n    docker-engine\\n</code></pre></div>","autoDesc":true}');export{sn as comp,on as data};
