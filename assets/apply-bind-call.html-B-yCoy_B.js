import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-jzX7c5DY.js";const e={},p=t(`<h2 id="_1-apply-方法" tabindex="-1"><a class="header-anchor" href="#_1-apply-方法"><span>1. <code>apply</code> 方法</span></a></h2><blockquote><p><code>apply</code> 方法允许你调用一个函数，并指定函数内部的 <code>this</code> 值和一个参数数组（或类数组对象）作为参数。语法如下：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 函数体</span>
<span class="token punctuation">}</span>

<span class="token function">functionName</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisValue<span class="token punctuation">,</span> <span class="token punctuation">[</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>thisValue</code> 参数是要将函数绑定到的对象，它将成为函数内部的 <code>this</code> 值。<code>arg1</code>, <code>arg2</code>, ... 是函数的参数。</p></blockquote><h2 id="_2-call" tabindex="-1"><a class="header-anchor" href="#_2-call"><span>2. call</span></a></h2><blockquote><p><code>call</code> 方法与 <code>apply</code> 方法类似，但是参数需要按照单独的参数传递，而不是作为数组。语法如下：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 函数体</span>
<span class="token punctuation">}</span>

<span class="token function">functionName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisValue<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>thisValue</code> 参数是要将函数绑定到的对象，<code>arg1</code>, <code>arg2</code>, ... 是函数的参数。</p></blockquote><h2 id="_3-bind" tabindex="-1"><a class="header-anchor" href="#_3-bind"><span>3. bind</span></a></h2><blockquote><p><code>bind</code>:它也可以用于改变函数的执行上下文。不同之处在于，<code>bind</code> 方法返回一个新的函数，而不是<mark>立即执行函数</mark>。你可以稍后调用返回的函数。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 函数体</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> boundFunction <span class="token operator">=</span> <span class="token function">functionName</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>thisValue<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">boundFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),c=[p];function o(l,i){return a(),s("div",null,c)}const d=n(e,[["render",o],["__file","apply-bind-call.html.vue"]]),k=JSON.parse('{"path":"/web/Javascript/apply-bind-call.html","title":"apply bind call","lang":"zh-CN","frontmatter":{"title":"apply bind call","tag":["Javascript"],"star":true,"description":"1. apply 方法 apply 方法允许你调用一个函数，并指定函数内部的 this 值和一个参数数组（或类数组对象）作为参数。语法如下： thisValue 参数是要将函数绑定到的对象，它将成为函数内部的 this 值。arg1, arg2, ... 是函数的参数。 2. call call 方法与 apply 方法类似，但是参数需要按照单独的参数...","head":[["meta",{"property":"og:url","content":"https://soft-vault.com/web/Javascript/apply-bind-call.html"}],["meta",{"property":"og:site_name","content":"Night.Soul"}],["meta",{"property":"og:title","content":"apply bind call"}],["meta",{"property":"og:description","content":"1. apply 方法 apply 方法允许你调用一个函数，并指定函数内部的 this 值和一个参数数组（或类数组对象）作为参数。语法如下： thisValue 参数是要将函数绑定到的对象，它将成为函数内部的 this 值。arg1, arg2, ... 是函数的参数。 2. call call 方法与 apply 方法类似，但是参数需要按照单独的参数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-21T09:45:34.000Z"}],["meta",{"property":"article:author","content":"Night.Soul"}],["meta",{"property":"article:tag","content":"Javascript"}],["meta",{"property":"article:modified_time","content":"2024-02-21T09:45:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"apply bind call\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-21T09:45:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Night.Soul\\",\\"url\\":\\"https://github.com/NightSquirrl\\"}]}"]]},"headers":[{"level":2,"title":"1. apply 方法","slug":"_1-apply-方法","link":"#_1-apply-方法","children":[]},{"level":2,"title":"2. call","slug":"_2-call","link":"#_2-call","children":[]},{"level":2,"title":"3. bind","slug":"_3-bind","link":"#_3-bind","children":[]}],"git":{"createdTime":1708508734000,"updatedTime":1708508734000,"contributors":[{"name":"NightSoul","email":"w1083670160@163.com","commits":1}]},"readingTime":{"minutes":0.85,"words":254},"filePathRelative":"web/Javascript/apply-bind-call.md","localizedDate":"2024年2月21日","excerpt":"<h2>1. <code>apply</code> 方法</h2>\\n<blockquote>\\n<p><code>apply</code> 方法允许你调用一个函数，并指定函数内部的 <code>this</code> 值和一个参数数组（或类数组对象）作为参数。语法如下：</p>\\n</blockquote>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">functionName</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">arg1<span class=\\"token punctuation\\">,</span> arg2<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">...</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 函数体</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token function\\">functionName</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span>thisValue<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span>arg1<span class=\\"token punctuation\\">,</span> arg2<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">...</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
