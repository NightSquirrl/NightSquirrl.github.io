import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as n,d as a,e as t,a as p}from"./app-jzX7c5DY.js";const u={},i=p(`<h1 id="网络请求" tabindex="-1"><a class="header-anchor" href="#网络请求"><span>网络请求</span></a></h1><ul><li>http数据请求</li><li>websocket</li><li>socket</li></ul><h2 id="http" tabindex="-1"><a class="header-anchor" href="#http"><span>HTTP</span></a></h2><h3 id="导入模块" tabindex="-1"><a class="header-anchor" href="#导入模块"><span>导入模块</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;@ohos.net.http&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>Demo</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 引入包名</span>
<span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;@ohos.net.http&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 每一个httpRequest对应一个HTTP请求任务，不可复用</span>
<span class="token keyword">let</span> httpRequest <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 用于订阅HTTP响应头，此接口会比request请求先返回。可以根据业务需要订阅此消息</span>
<span class="token comment">// 从API 8开始，使用on(&#39;headersReceive&#39;, Callback)替代on(&#39;headerReceive&#39;, AsyncCallback)。 8+</span>
httpRequest<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;headersReceive&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;header: &#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
httpRequest<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>
    <span class="token comment">// 填写HTTP请求的URL地址，可以带参数也可以不带参数。URL地址需要开发者自定义。请求的参数可以在extraData中指定</span>
    <span class="token string">&quot;EXAMPLE_URL&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        method<span class="token operator">:</span> http<span class="token punctuation">.</span>RequestMethod<span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span> <span class="token comment">// 可选，默认为http.RequestMethod.GET</span>
        <span class="token comment">// 开发者根据自身业务需要添加header字段</span>
        header<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 当使用POST请求时此字段用于传递内容</span>
        extraData<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token string">&quot;data to send&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        expectDataType<span class="token operator">:</span> http<span class="token punctuation">.</span>HttpDataType<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span> <span class="token comment">// 可选，指定返回数据的类型</span>
        usingCache<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 可选，默认为true</span>
        priority<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 可选，默认为1</span>
        connectTimeout<span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span> <span class="token comment">// 可选，默认为60000ms</span>
        readTimeout<span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span> <span class="token comment">// 可选，默认为60000ms</span>
        usingProtocol<span class="token operator">:</span> http<span class="token punctuation">.</span>HttpProtocol<span class="token punctuation">.</span><span class="token constant">HTTP1_1</span><span class="token punctuation">,</span> <span class="token comment">// 可选，协议类型默认值由系统自动指定</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// data.result为HTTP响应内容，可根据业务需要进行解析</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;Result:&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;code:&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>responseCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// data.header为HTTP响应头，可根据业务需要进行解析</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;header:&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;cookies:&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8+</span>
            <span class="token comment">// 取消订阅HTTP响应头事件</span>
            httpRequest<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;headersReceive&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 当该请求使用完毕时，调用destroy方法主动销毁</span>
            httpRequest<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;error:&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 取消订阅HTTP响应头事件</span>
            httpRequest<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;headersReceive&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 当该请求使用完毕时，调用destroy方法主动销毁。</span>
            httpRequest<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="requset-参数" tabindex="-1"><a class="header-anchor" href="#requset-参数"><span>requset 参数</span></a></h3>`,8),r=n("thead",null,[n("tr",null,[n("th",null,"名称"),n("th",null,"类型"),n("th",null,"必填"),n("th",null,"说明")])],-1),k=n("td",null,"method",-1),d={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-http-0000001478061929-V3#ZH-CN_TOPIC_0000001523968386__requestmethod",target:"_blank",rel:"noopener noreferrer"},m=n("td",null,"否",-1),v=n("td",null,"请求方式。",-1),h=n("tr",null,[n("td",null,"extraData"),n("td",null,[n("code",null,"string ")]),n("td",null,"Object"),n("td",null,[n("code",null,`ArrayBuffer8+发送请求的额外数据。- 当HTTP请求为POST、PUT等方法时，此字段为HTTP请求的content。当'Content-Type'为'application/x-www-form-urlencoded'时，请求提交的信息主体数据应在key和value进行URL转码后按照键值对"key1=value1&key2=value2&key3=value3"的方式进行编码。- 当HTTP请求为GET、OPTIONS、DELETE、TRACE、CONNECT等方法时，此字段为HTTP请求的参数补充，参数内容会拼接到URL中进行发送。- 开发者传入string对象，开发者需要自行编码，将编码后的string传入。`)])],-1),b={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-http-0000001478061929-V3#ZH-CN_TOPIC_0000001523968386__entry809654898152951p0",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-http-0000001478061929-V3#ZH-CN_TOPIC_0000001523968386__httpdatatype9",target:"_blank",rel:"noopener noreferrer"},f=n("td",null,"否",-1),y=n("td",null,"指定返回数据的类型。如果设置了此参数，系统将优先返回指定的类型。",-1),_=n("tr",null,[n("td",null,"usingCache9+"),n("td",null,"boolean"),n("td",null,"否"),n("td",null,"是否使用缓存，默认为true。")],-1),T=n("tr",null,[n("td",null,"priority9+"),n("td",null,"number"),n("td",null,"否"),n("td",null,"优先级，范围[1,1000]，默认是1。")],-1),q=n("tr",null,[n("td",null,"header"),n("td",null,"Object"),n("td",null,"否"),n("td",null,[n("code",null,"HTTP请求头字段。默认{'Content-Type': 'application/json'}。")])],-1),w=n("tr",null,[n("td",null,"readTimeout"),n("td",null,"number"),n("td",null,"否"),n("td",null,"读取超时时间。单位为毫秒（ms），默认为60000ms。设置为0表示不会出现超时情况。")],-1),P=n("tr",null,[n("td",null,"connectTimeout"),n("td",null,"number"),n("td",null,"否"),n("td",null,"连接超时时间。单位为毫秒（ms），默认为60000ms。")],-1),S=n("td",null,"usingProtocol9+",-1),N={href:"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-http-0000001478061929-V3#ZH-CN_TOPIC_0000001523968386__httpprotocol9",target:"_blank",rel:"noopener noreferrer"},R=n("td",null,"否",-1),H=n("td",null,"使用协议。默认值由系统自动指定。",-1),x=p(`<h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>webSocket</span></a></h2><h3 id="导入模块-1" tabindex="-1"><a class="header-anchor" href="#导入模块-1"><span>导入模块</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> webSocket <span class="token keyword">from</span> <span class="token string">&#39;@ohos.net.webSocket&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="demo-1" tabindex="-1"><a class="header-anchor" href="#demo-1"><span>Demo</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> webSocket <span class="token keyword">from</span> <span class="token string">&#39;@ohos.net.webSocket&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> defaultIpAddress <span class="token operator">=</span> <span class="token string">&quot;ws://&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> ws <span class="token operator">=</span> webSocket<span class="token punctuation">.</span><span class="token function">createWebSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;on open, status:&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;, message:&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 当收到on(&#39;open&#39;)事件时，可以通过send()方法与服务器进行通信</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, server!&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;send success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;send fail, err:&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;on message, message:&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 当收到服务器的\`bye\`消息时（此消息字段仅为示意，具体字段需要与服务器协商），主动断开连接</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">&#39;bye&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;close success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;close fail, err is &quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;on close, code is &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>code <span class="token operator">+</span> <span class="token string">&quot;, reason is &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;on error, error:&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>defaultIpAddress<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;connect success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;connect fail, err:&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function O(C,D){const s=o("ExternalLinkIcon");return c(),l("div",null,[i,n("table",null,[r,n("tbody",null,[n("tr",null,[k,n("td",null,[n("a",d,[a("RequestMethod"),t(s)])]),m,v]),h,n("tr",null,[n("td",null,[n("a",b,[a("expectDataType9+"),t(s)])]),n("td",null,[n("a",g,[a("HttpDataType"),t(s)])]),f,y]),_,T,q,w,P,n("tr",null,[S,n("td",null,[n("a",N,[a("HttpProtocol"),t(s)])]),R,H])])]),x])}const I=e(u,[["render",O],["__file","8-networkRequest.html.vue"]]),J=JSON.parse(`{"path":"/web/harmony/8-networkRequest.html","title":"🦋 8-网络请求","lang":"zh-CN","frontmatter":{"title":"🦋 8-网络请求","tag":["harmony"],"star":true,"description":"网络请求 http数据请求 websocket socket HTTP 导入模块 Demo requset 参数 webSocket 导入模块 Demo","head":[["meta",{"property":"og:url","content":"https://soft-vault.com/web/harmony/8-networkRequest.html"}],["meta",{"property":"og:site_name","content":"Night.Soul"}],["meta",{"property":"og:title","content":"🦋 8-网络请求"}],["meta",{"property":"og:description","content":"网络请求 http数据请求 websocket socket HTTP 导入模块 Demo requset 参数 webSocket 导入模块 Demo"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T16:41:41.000Z"}],["meta",{"property":"article:author","content":"Night.Soul"}],["meta",{"property":"article:tag","content":"harmony"}],["meta",{"property":"article:modified_time","content":"2024-05-11T16:41:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"🦋 8-网络请求\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-11T16:41:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Night.Soul\\",\\"url\\":\\"https://github.com/NightSquirrl\\"}]}"]]},"headers":[{"level":2,"title":"HTTP","slug":"http","link":"#http","children":[{"level":3,"title":"导入模块","slug":"导入模块","link":"#导入模块","children":[]},{"level":3,"title":"Demo","slug":"demo","link":"#demo","children":[]},{"level":3,"title":"requset 参数","slug":"requset-参数","link":"#requset-参数","children":[]}]},{"level":2,"title":"webSocket","slug":"websocket","link":"#websocket","children":[{"level":3,"title":"导入模块","slug":"导入模块-1","link":"#导入模块-1","children":[]},{"level":3,"title":"Demo","slug":"demo-1","link":"#demo-1","children":[]}]}],"git":{"createdTime":1709475838000,"updatedTime":1715445701000,"contributors":[{"name":"nightsoul","email":"w1083670160@163.com","commits":1}]},"readingTime":{"minutes":3.16,"words":947},"filePathRelative":"web/harmony/8-networkRequest.md","localizedDate":"2024年3月3日","excerpt":"\\n<ul>\\n<li>http数据请求</li>\\n<li>websocket</li>\\n<li>socket</li>\\n</ul>\\n<h2>HTTP</h2>\\n<h3>导入模块</h3>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">import</span> http <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'@ohos.net.http'</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{I as comp,J as data};
