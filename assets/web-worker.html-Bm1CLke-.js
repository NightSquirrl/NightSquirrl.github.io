import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as p,c as r,b as n,d as s,e,a as t}from"./app-jzX7c5DY.js";const c={},i=t(`<h2 id="_1-什么是-web-worker" tabindex="-1"><a class="header-anchor" href="#_1-什么是-web-worker"><span>1. 什么是 Web Worker</span></a></h2><p>Js 是单线程的代码,意思是同一时间只能干一件事情,比如前端的界面在 loading,JS 在进行大量的运算,就会导致页面卡住.</p><p>Web Worker允许我们在 js 主线程之外开辟新的 Worker 线程，并将一段 js 脚本运行其中，它赋予了开发者利用 js 操作多线程的能力。</p><h2 id="_2-web-worker-的使用" tabindex="-1"><a class="header-anchor" href="#_2-web-worker-的使用"><span>2. Web Worker 的使用</span></a></h2><h3 id="创建-worker" tabindex="-1"><a class="header-anchor" href="#创建-worker"><span>创建 <code>worker</code></span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),d=n("thead",null,[n("tr",null,[n("th",null,"参数"),n("th",null,"说明")])],-1),u=n("tr",null,[n("td",null,"path"),n("td",null,[s("有效的js脚本的地址，必须遵守同源策略。无效的js地址或者违反同源策略，会抛出"),n("code",null,"SECURITY_ERR "),s("类型错误")])],-1),k=n("tr",null,[n("td",null,"options.type"),n("td",null,[s("可选，用以指定 worker 类型。该值可以是 "),n("code",null,"classic"),s(" 或 "),n("code",null,"module"),s("。 如未指定，将使用默认值 "),n("code",null,"classic")])],-1),m=n("tr",null,[n("td",null,"options.credentials"),n("td",null,[s("可选，用以指定 worker 凭证。该值可以是 "),n("code",null,"omit"),s(", "),n("code",null,"same-origin"),s("，或 "),n("code",null,"include"),s("。如果未指定，或者 type 是 "),n("code",null,"classic"),s("，将使用默认值 "),n("code",null,"omit"),s(" (不要求凭证)")])],-1),v=n("td",null,"options.name",-1),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/DedicatedWorkerGlobalScope",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"DedicatedWorkerGlobalScope",-1),g={href:"https://developer.mozilla.org/zh-CN/docs/conflicting/Web/JavaScript/Reference/Global_Objects/String_6fa58bba0570d663099f0ae7ae8883ab",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"DOMString",-1),w=t(`<h3 id="js-主线程与-worker-线程数据传递" tabindex="-1"><a class="header-anchor" href="#js-主线程与-worker-线程数据传递"><span>js 主线程与 worker 线程数据传递</span></a></h3><p>主线程与 worker 线程都是通过 <code>postMessage</code> 方法来发送消息，以及监听 <code>message</code> 事件来接收消息。如下所示：</p><blockquote><p>main.js（主线程）</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;/worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建worker</span>

myWorker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 接收消息</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Greeting from Worker.js，worker线程发送的消息</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这种写法也可以</span>
<span class="token comment">// myWorker.onmessage = e =&gt; { // 接收消息</span>
<span class="token comment">//    console.log(e.data);</span>
<span class="token comment">// };</span>

myWorker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Greeting from Main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向 worker 线程发送消息，对应 worker 线程中的 e.data</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>主线程与 worker 线程之间的数据传递是传值而不是传地址。</p></blockquote><blockquote><p>worker</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// worker.js（worker线程）</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将接收到的数据直接返回</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监听错误信息" tabindex="-1"><a class="header-anchor" href="#监听错误信息"><span>监听错误信息</span></a></h3><p>web worker 提供两个事件监听错误，<code>error</code> 和 <code>messageerror</code>。这两个事件的区别是:</p><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td><code>error</code></td><td>当worker内部出现错误时触发</td></tr><tr><td><code>messageerror</code></td><td>当 <code>message</code> 事件接收到无法被反序列化的参数时触发</td></tr></tbody></table><p>监听方式跟接收消息一致：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// main.js（主线程）</span>
<span class="token keyword">const</span> myWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;/worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建worker</span>

myWorker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myWorker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;messageerror&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// worker.js（worker线程）</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;messageerror&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关闭-worker-线程" tabindex="-1"><a class="header-anchor" href="#关闭-worker-线程"><span>关闭 worker 线程</span></a></h3><blockquote><p>worker 线程的关闭在主线程和 worker 线程都能进行操作，但对 worker 线程的影响略有不同。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// main.js（主线程）</span>
<span class="token keyword">const</span> myWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;/worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建worker</span>
myWorker<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭worker</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// worker.js（worker线程）</span>
self<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接执行close方法就ok了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>区别是，在主线程手动关闭 worker，主线程与 worker 线程之间的连接都会被立刻停止，即使 worker 线程当前的 Event Loop 中仍有待执行的任务继续调用 <code>postMessage()</code> 方法，但主线程不会再接收到消息。</p><p>在 worker 线程内部关闭 worker，不会直接断开与主线程的连接，而是等 worker 线程当前的 Event Loop 所有任务执行完，再关闭。也就是说，在当前 Event Loop 中继续调用 <code>postMessage()</code> 方法，主线程还是能通过监听<code>message</code>事件收到消息的。</p><h3 id="worker-线程引用其他js文件" tabindex="-1"><a class="header-anchor" href="#worker-线程引用其他js文件"><span>Worker 线程引用其他js文件</span></a></h3><blockquote><p>utils.js</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>worker.js（worker线程）</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 使用方法：importScripts(path1, path2, ...); </span>

<span class="token function">importScripts</span><span class="token punctuation">(</span><span class="token string">&#39;./utils.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// log 3</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="esmodule-模式" tabindex="-1"><a class="header-anchor" href="#esmodule-模式"><span>ESModule 模式</span></a></h3><p>还有一些场景，当你开启一个新项目，正高兴的用 <code>importScripts()</code> 导入js文件时发现， <code>importScripts()</code> 方法执行失败。仔细一看，原来是新项目的 js 文件都用的是 ESModule 模式。难道要把引用到的文件都改一遍吗？当然不用，还记得上文提到初始化 worker 时的第二个可选参数吗，我们可以直接使用 module 模式初始化 worker 线程！</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// main.js（主线程）</span>
<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;/worker.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span>  <span class="token comment">// 指定 worker.js 的类型</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// utils.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// worker.js（worker线程）</span>
<span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">&#39;./utils.js&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 导入外部js</span>

self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    <span class="token function">postMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// log 3</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> self<span class="token punctuation">;</span> <span class="token comment">// 只需把顶级对象self暴露出去即可</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="主线程和-worker-线程可传递哪些类型数据" tabindex="-1"><a class="header-anchor" href="#主线程和-worker-线程可传递哪些类型数据"><span>主线程和 worker 线程可传递哪些类型数据</span></a></h3><p>很多场景，在调用某些方法时，我们将一些自定义方法当作参数传入。但是，当你使用 <code>postMessage()</code> 方法时这么做，将会导致 <code>DATA_CLONE_ERR</code> 错误。</p><p><code>postMessage()</code> 传递的数据可以是由结构化克隆算法处理的任何值或 JavaScript 对象，包括循环引用。</p><p>结构化克隆算法<strong>不能处理</strong>的数据：</p><ul><li><code>Error</code> 以及 <code>Function</code> 对象；</li><li>DOM 节点</li><li>对象的某些特定参数不会被保留 <ul><li><code>RegExp </code>对象的 <code>lastIndex</code> 字段不会被保留</li><li>属性描述符，setters 以及 getters（以及其他类似元数据的功能）同样不会被复制。例如，如果一个对象用属性描述符标记为 read-only，它将会被复制为 read-write</li><li>原形链上的属性也不会被追踪以及复制。</li></ul></li></ul><h4 id="结构化克隆算法支持的数据类型" tabindex="-1"><a class="header-anchor" href="#结构化克隆算法支持的数据类型"><span>结构化克隆算法<strong>支持</strong>的数据类型：</span></a></h4>`,35),j=n("thead",null,[n("tr",null,[n("th",null,"类型"),n("th",null,"说明")])],-1),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures%23%E5%8E%9F%E5%A7%8B%E5%80%BC",target:"_blank",rel:"noopener noreferrer"},W=n("td",null,"symbols 除外",-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean",target:"_blank",rel:"noopener noreferrer"},S=n("td",null,null,-1),x=n("tr",null,[n("td",null,"String 对象"),n("td")],-1),z={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date",target:"_blank",rel:"noopener noreferrer"},N=n("td",null,null,-1),E={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp",target:"_blank",rel:"noopener noreferrer"},C=n("td",null,[n("code",null,"lastIndex"),s(" 字段不会被保留。")],-1),J={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"Blob",-1),M=n("td",null,null,-1),A={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/File",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"File",-1),L=n("td",null,null,-1),G={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FileList",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"FileList",-1),I=n("td",null,null,-1),B={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",target:"_blank",rel:"noopener noreferrer"},D=n("td",null,null,-1),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray",target:"_blank",rel:"noopener noreferrer"},P={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Typed_arrays",target:"_blank",rel:"noopener noreferrer"},F={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/ImageData",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"ImageData",-1),Z=n("td",null,null,-1),U={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array",target:"_blank",rel:"noopener noreferrer"},Y=n("td",null,null,-1),H={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object",target:"_blank",rel:"noopener noreferrer"},K=n("td",null,"仅包括普通对象（如对象字面量）",-1),Q={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map",target:"_blank",rel:"noopener noreferrer"},X=n("td",null,null,-1),$={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set",target:"_blank",rel:"noopener noreferrer"},nn=n("td",null,null,-1);function sn(an,en){const a=l("ExternalLinkIcon");return p(),r("div",null,[i,n("table",null,[d,n("tbody",null,[u,k,m,n("tr",null,[v,n("td",null,[s("可选，在 "),n("a",b,[h,e(a)]),s(" 的情况下，用来表示 worker 的 scope 的一个 "),n("a",g,[_,e(a)]),s(" 值，主要用于调试目的。")])])])]),w,n("table",null,[j,n("tbody",null,[n("tr",null,[n("td",null,[n("a",f,[s("所有的原始类型"),e(a)])]),W]),n("tr",null,[n("td",null,[n("a",y,[s("Boolean"),e(a)]),s(" 对象")]),S]),x,n("tr",null,[n("td",null,[n("a",z,[s("Date"),e(a)])]),N]),n("tr",null,[n("td",null,[n("a",E,[s("RegExp"),e(a)])]),C]),n("tr",null,[n("td",null,[n("a",J,[R,e(a)])]),M]),n("tr",null,[n("td",null,[n("a",A,[O,e(a)])]),L]),n("tr",null,[n("td",null,[n("a",G,[q,e(a)])]),I]),n("tr",null,[n("td",null,[n("a",B,[s("ArrayBuffer"),e(a)])]),D]),n("tr",null,[n("td",null,[n("a",T,[s("ArrayBufferView"),e(a)])]),n("td",null,[s("这基本上意味着所有的 "),n("a",P,[s("类型化数组"),e(a)]),s(" ，如 Int32Array 等。")])]),n("tr",null,[n("td",null,[n("a",F,[V,e(a)])]),Z]),n("tr",null,[n("td",null,[n("a",U,[s("Array"),e(a)])]),Y]),n("tr",null,[n("td",null,[n("a",H,[s("Object"),e(a)])]),K]),n("tr",null,[n("td",null,[n("a",Q,[s("Map"),e(a)])]),X]),n("tr",null,[n("td",null,[n("a",$,[s("Set"),e(a)])]),nn])])])])}const ln=o(c,[["render",sn],["__file","web-worker.html.vue"]]),pn=JSON.parse('{"path":"/web/web-learn/web-worker.html","title":"Web Worker","lang":"zh-CN","frontmatter":{"title":"Web Worker","tag":["web","前端"],"description":"1. 什么是 Web Worker Js 是单线程的代码,意思是同一时间只能干一件事情,比如前端的界面在 loading,JS 在进行大量的运算,就会导致页面卡住. Web Worker允许我们在 js 主线程之外开辟新的 Worker 线程，并将一段 js 脚本运行其中，它赋予了开发者利用 js 操作多线程的能力。 2. Web Worker 的使用...","head":[["meta",{"property":"og:url","content":"https://soft-vault.com/web/web-learn/web-worker.html"}],["meta",{"property":"og:site_name","content":"Night.Soul"}],["meta",{"property":"og:title","content":"Web Worker"}],["meta",{"property":"og:description","content":"1. 什么是 Web Worker Js 是单线程的代码,意思是同一时间只能干一件事情,比如前端的界面在 loading,JS 在进行大量的运算,就会导致页面卡住. Web Worker允许我们在 js 主线程之外开辟新的 Worker 线程，并将一段 js 脚本运行其中，它赋予了开发者利用 js 操作多线程的能力。 2. Web Worker 的使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-11T08:10:15.000Z"}],["meta",{"property":"article:author","content":"Night.Soul"}],["meta",{"property":"article:tag","content":"web"}],["meta",{"property":"article:tag","content":"前端"}],["meta",{"property":"article:modified_time","content":"2024-08-11T08:10:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Web Worker\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-11T08:10:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Night.Soul\\",\\"url\\":\\"https://github.com/NightSquirrl\\"}]}"]]},"headers":[{"level":2,"title":"1. 什么是 Web Worker","slug":"_1-什么是-web-worker","link":"#_1-什么是-web-worker","children":[]},{"level":2,"title":"2. Web Worker 的使用","slug":"_2-web-worker-的使用","link":"#_2-web-worker-的使用","children":[{"level":3,"title":"创建 worker","slug":"创建-worker","link":"#创建-worker","children":[]},{"level":3,"title":"js 主线程与 worker 线程数据传递","slug":"js-主线程与-worker-线程数据传递","link":"#js-主线程与-worker-线程数据传递","children":[]},{"level":3,"title":"监听错误信息","slug":"监听错误信息","link":"#监听错误信息","children":[]},{"level":3,"title":"关闭 worker 线程","slug":"关闭-worker-线程","link":"#关闭-worker-线程","children":[]},{"level":3,"title":"Worker 线程引用其他js文件","slug":"worker-线程引用其他js文件","link":"#worker-线程引用其他js文件","children":[]},{"level":3,"title":"ESModule 模式","slug":"esmodule-模式","link":"#esmodule-模式","children":[]},{"level":3,"title":"主线程和 worker 线程可传递哪些类型数据","slug":"主线程和-worker-线程可传递哪些类型数据","link":"#主线程和-worker-线程可传递哪些类型数据","children":[]}]}],"git":{"createdTime":1723363815000,"updatedTime":1723363815000,"contributors":[{"name":"NightSoul","email":"w1083670160@163.com","commits":1}]},"readingTime":{"minutes":4.6,"words":1381},"filePathRelative":"web/web-learn/web-worker.md","localizedDate":"2024年8月11日","excerpt":"<h2>1. 什么是 Web Worker</h2>\\n<p>Js 是单线程的代码,意思是同一时间只能干一件事情,比如前端的界面在 loading,JS 在进行大量的运算,就会导致页面卡住.</p>\\n<p>Web Worker允许我们在 js 主线程之外开辟新的 Worker 线程，并将一段 js 脚本运行其中，它赋予了开发者利用 js 操作多线程的能力。</p>\\n<h2>2. Web Worker 的使用</h2>\\n<h3>创建 <code>worker</code></h3>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> worker <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Worker</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">,</span> options<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{ln as comp,pn as data};
